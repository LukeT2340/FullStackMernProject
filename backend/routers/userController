// Required libraries
const express = require('express');
const router = express.Router();
const bodyParser = require('body-parser'); 
const bcrypt = require('bcrypt');
const User = require('../models/User');
const jwt = require('jsonwebtoken');

// All recieved data is converted to JSON format
router.use(bodyParser.json()); 

// Creates token
const createToken = (id) => {
    return jwt.sign({id}, process.env.SECRET, { expiresIn: '3d'});
};

// Hashes passwords
async function hashPassword(password) {
    try {
        const hashedPassword = await bcrypt.hash(password, 10); // Hash password with salt rounds of 10
        return hashedPassword;
    } catch (error) {
        throw new Error('Error hashing password');
    }
}

// Sign up route
router.post('/signup', async (req, res) => {
    try {
        // Check if username or email already exists
        const existingUser = await User.findOne({ $or: [{ username: req.body.username }, { email: req.body.email }] });
        if (existingUser) {
            return res.status(400).json({ message: 'Username or email already exists' });
        }

        // Hash the password
        const hashedPassword = await hashPassword(req.body.password);

        // Create a new user
        const newUser = new User({
            username: req.body.username,
            display_name: req.body.display_name,
            email: req.body.email,
            password: hashedPassword
        });

        // Save the user to the database
        await newUser.save();

        // Generate token
        const token = createToken(newUser._id);

        res.status(200).json({ user_id: newUser._id, email: newUser.email, token: token });
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
});

// Login route
router.post('/login', async (req, res) => {
    try {
        // Find the user by username
        const user = await User.findOne({ username: req.body.username });
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        // Check if the password is correct
        const isPasswordValid = await bcrypt.compare(req.body.password, user.password);
        if (!isPasswordValid) {
            return res.status(401).json({ message: 'Invalid password' });
        }

        // Generate token
        const token = createToken(user._id);

        res.status(200).json({ user_id: user._id, email: user.email, token: token });
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
});


module.exports = router;

